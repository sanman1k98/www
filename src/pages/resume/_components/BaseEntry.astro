---
import type { CollectionEntry } from "astro:content";
import { CV_START } from "@/content";

const NOW: number = Date.now();

const getMixPercentage = (date?: Date): string => {
  const diff = date ? NOW - date.valueOf() : 0
  const decimal = 1 - (diff / (NOW - CV_START.valueOf()));
  return `${decimal * 100}%`
}

type Props = {
  entry?: CollectionEntry<"cv">,
  link?: string,
  heading?: string,
  subheading?: string,
  "after-subheading"?: string,
  time?: Date | [Date, Date?]
};

const {
  entry,
  link,
  heading,
  subheading,
  time
} = Astro.props;

let timetext: string | null = null;
let p2: string | null = null;

if (time) {
  const dateFormat = Intl.DateTimeFormat("en", {
    year: "numeric", month: "long", timeZone: "UTC"
  });
  if (time instanceof Date) {
    timetext = dateFormat.format(time);
    p2 = getMixPercentage(time);
  } else if (time instanceof Array) {
    const [start, end] = time;
    p2 = getMixPercentage(end);
    timetext = end
      ? dateFormat.formatRange(start, end)
      : `${dateFormat.format(start)} - Present`;
  }
}

const { Content } = await entry?.render() ?? {};
---

<style>
  article > div :global(ul) {
    margin-left: 2ch;
    list-style-type: "- ";
    list-style-position: outside;
  }

  article > div :global(li) {
    margin-bottom: 0.3rem;
  }

  /* We can visualize how old or new an entry is using color. */
  time {
    /* A color representing the date from earliest entry in the "cv" collection. */
    --cv-start-color: theme(colors.sky.500);
    /* A color representing the present date. */
    --now-color: theme(colors.sky.700);
    /* Amount of `--cv-start-color` to mix. */
    --p1: 0%;
    /* Amount of `--now-color` to mix. */
    --p2: 100%;
    /* The start color determined by `--p1`. */
    --start-color: color-mix(in lch longer hue, var(--cv-start-color) var(--p1), var(--now-color));
    /* The end color determined by `--p2`. */
    --end-color: color-mix(in lch longer hue, var(--cv-start-color), var(--now-color) var(--p2));

    /* We'll just use the `--end-color` for now. */
    /* TODO: apply a gradient to the text using both start and end colors. */
    color: var(--end-color);
  }
</style>

<article class="m-3 mb-5 break-before-avoid break-inside-avoid">
  <header class="mb-2">
    {(Astro.slots.has("heading") || heading) && (
      <h3 class="leading-snug font-600 text-slate-700 text-lg tracking-tight">
        {link ? (
          <a
            class="group flex max-w-fit"
            href={link}
            target="_blank"
          >
            <span class="transition duration-300 font-650 underline underline-offset-3 decoration-2 decoration-sky-600 group-hover:text-sky-700 group-hover:decoration-sky-400 print:underline-offset-2">
              <slot name="heading">{heading}</slot>
            </span>
            <div class="
              print:hidden
              i-ph-arrow-up-right-bold
              transition duration-300
              text-slate-500 opacity-50 scale-85
              group-hover:translate-x-1 group-hover:-translate-y-1
              group-hover:opacity-100 group-hover:scale-100
            "></div>
          </a>
        ) : (
          <slot name="heading">{heading}</slot>
        )}
      </h3>
    )}
    {(Astro.slots.has("subheading") || subheading) && (
      <p class="leading-tight text-slate-500 italic">
        <slot name="subheading">{subheading}</slot>
      </p>
    )}
    <slot name="after-subheading">
      {timetext && <time style={{"--p2": p2}} class="leading-tight text-slate-500">{timetext}</time>}
    </slot>
  </header>
  {(Astro.slots.has("default") || Content) && (
    <div class="leading-tight">
      <slot>
        {Content && <Content />}
      </slot>
    </div>
  )}
</article>
