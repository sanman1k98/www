---
import Section from "./_components/BaseSection.astro";
import Entry from "./_components/BaseEntry.astro";
import Contact from "./_components/Contact.astro";
import SkillDetails from "./_components/SkillDetails.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { env, unoBreakpoints } from "@/utils";
import {
  compareCvEntries,
  cvEntries,
  createCvEntryTypeGuard as isType,
} from "@/content";

const objective = cvEntries.find(({ slug }) => slug === "objective")!;
const skills = cvEntries.filter(isType("skills")).sort(compareCvEntries);

const experience = cvEntries.filter(isType("experience"));
const projects = cvEntries.filter(isType("open-source")).sort(compareCvEntries);
const certifications = cvEntries.filter(isType("certification"));
const education = cvEntries.filter(isType("education"));

const { Content: Objective } = env.BUILD_INCLUDE_PERSONAL
  ? await objective.render()
  : { Content: null };

const sidebarBreakpoint = unoBreakpoints.lg;
---

<style is:global>
  :root {
    background-color: white;
  }

  /* Remove default disclosure triangle icon */
  summary::-webkit-details-marker,
  summary::marker { display: none; content: ""; }

  main {
    display: grid;
    margin-inline: auto;
    grid: auto / minmax(0, 1fr);
    justify-content: center;
  }

  @screen lg {
    main {
      grid: auto / max-content max-content;
    }
  }

  @media print {
    :root {
      font-size: 10.5px;
      print-color-adjust: exact;
      background-color: inherit;
    }
  }
</style>

<BaseLayout
  title="Sandeep Dilip's Resume"
  description="Sandeep Dilip's professional experience, open source projects, contact links, and other information."
  class="font-mono"
>

  <header class="mx-auto my-6 max-w-5xl flex flex-wrap items-center justify-between gap-y-8 px-4 container print:mb-4 sm:px-10">
    <div class="text-left">
      <h1 class="text-3xl text-slate-900 font-600 tracking-tighter">
        <a href={import.meta.env.SITE} class="group">
          <span aria-hidden="true" class="mr-2 hidden text-slate-300 transition duration-1000 sm:inline group-hover:text-sky-700">#</span>
          <span
            class="underline decoration-3 decoration-sky-600 underline-offset-3 transition duration-600 group-hover:text-sky-950 group-hover:decoration-sky-400"
          >Sandeep Dilip</span>
        </a>
      </h1>
      <p class="text-slate-500 italic sm:ml-6">Software Engineer</p>
    </div>
    <Contact class="text-center text-2xl print:text-right sm:text-right sm:text-base print:text-sm!" />
  </header>

  <main class="text-sm text-slate-700 lg:gap-x-10 sm:text-base">
    {Objective && (
      <Section
        heading="Objective"
        class="mx-auto max-w-prose lg:col-span-2 lg:max-w-4xl"
      >
        <div class="m-3 font-400 leading-tight">
          <Objective />
        </div>
      </Section>
    )}

    <Section
      heading="Skills"
      class="sm:mx-auto lg:max-w-prose lg:w-auto sm:w-prose md:px-2"
    >
      <div class="ml-3 justify-between lg:block md:flex lg:pr-8 print:pr-8">
        {
          skills.map((skill, i) => (
              <SkillDetails class:list={["mb-3", i === 0 ? "w-40" : "w-48"]} entry={skill} />
          ))
        }
      </div>

      <script define:vars={{ sidebarBreakpoint }}>
      "use strict";

      const mql = window.matchMedia(`(min-width: ${sidebarBreakpoint})`);
      const details = document.querySelectorAll("details");
      const state = {}

      if (mql.matches) {
        details.forEach(d => {
          state[d.id] = false;
          d.open = true;
        });
      }

      const handleClick = (ev) => mql.matches && ev.preventDefault();
      const saveState = ({ target }) => state[target.id] = mql.matches ? state[target.id] : target.open;

      details.forEach(d => {
        d.addEventListener("click", handleClick);
        d.addEventListener("toggle", saveState);
      });

      mql.addEventListener("change",
        (ev) => details.forEach(d => d.open = ev.matches || state[d.id])
      );
      </script>
    </Section>

    <div class="mx-auto max-w-prose">
      <Section heading="Experience">
        {
          experience
            .filter(({ data }) => data.experience === "work")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
                entry={exp}
              />
            ))
        }
      </Section>

      <Section heading="Open source" class="">
        {
          projects
            .filter(proj => !proj.data.draft)
            .map(proj => (
              <Entry
                link={proj.data.githubUrl}
                heading={proj.data.title}
                subheading={proj.data.description}
                entry={proj}
              />
            ))
        }
      </Section>

      <Section heading="Volunteering">
        {
          experience
            .filter(({ data }) => data.experience === "volunteering")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
                entry={exp}
              />
            ))
        }
      </Section>

      <Section heading="Certification">
        {
          certifications.map(({ data: cert }) => (
            <Entry
              link={cert.url}
              heading={cert.name}
              subheading={cert.organization.name}
              time={cert.issueDate}
            />
          ))
        }
      </Section>

      <Section heading="Education">
        {
          education.map(({ data: edu }) => (
            <Entry
              heading={`${edu.degree} ${edu.major}`}
              subheading={edu.school.name}
              time={[edu.start, edu.end]}
            />
          ))
        }
      </Section>

      <Section heading="Internships">
        {
          experience
            .filter(({ data }) => data.experience === "internship")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
              />
            ))
        }
      </Section>
    </div>
  </main>
  <div class="h-[20vh] print:hidden"></div>
</BaseLayout>
