---
import {
  cvEntries,
  createCvEntryTypeGuard as isType,
} from "@/content";
import { env, unoBreakpoints } from "@/utils"

import BaseLayout from "@/layouts/BaseLayout.astro";
import Section from "./_components/BaseSection.astro";
import Entry from "./_components/BaseEntry.astro";
import Contact from "./_components/Contact.astro";
import SkillDetails from "./_components/SkillDetails.astro";

const skills = cvEntries.filter(isType("skills"));
const experience = cvEntries.filter(isType("experience"));
const projects = cvEntries.filter(isType("open-source"));
const certifications = cvEntries.filter(isType("certification"));
const education = cvEntries.filter(isType("education"));

let Objective;
if (env.BUILD_INCLUDE_PERSONAL) {
  const objective = cvEntries.find(entry => entry.slug === "objective")!;
  Objective = (await objective.render()).Content;
}

const sidebarBreakpoint = unoBreakpoints["lg"];
---

<style is:global>
  :root {
    background-color: white;
  }

  @media print {
    :root {
      font-size: 10.5px;
      print-color-adjust: exact;
      background-color: inherit;
    }
  }
</style>

<BaseLayout
  title="Sandeep Dilip's Resume"
  description="Sandeep Dilip's professional experience, open source projects, contact links, and other information."
>
  <header class="
    container max-w-5xl
    mx-auto my-6 px-6 sm:px-10
    flex justify-between items-center
    font-mono
    print:mb-4
  ">
    <div class="text-left">
      <h1 class="text-3xl tracking-tighter font-600 text-slate-900">
        <a href="/">Sandeep Dilip</a>
      </h1>
      <p class="text-slate-500">Software Engineer</p>
    </div>
    <Contact class={`
      text-2xl text-center
      sm:text-base sm:text-right 
      print:text-right print:text-sm!
    `}/>
  </header>

  <main class="mx-auto grid grid-cols-1 lg:grid-cols-[max-content_max-content] justify-center lg:gap-x-10 px-6 font-mono text-sm sm:text-base text-slate-700">
    {env.BUILD_INCLUDE_PERSONAL && Objective && (
      <Section
        heading="Objective"
        class="lg:col-span-2 mx-auto max-w-prose lg:max-w-4xl"
      >
        <div class="m-3 leading-tight font-400">
          <Objective />
        </div>
      </Section>
    )}

    <Section
      heading="Skills"
      class="sm:mx-auto sm:w-[65ch] lg:w-auto lg:max-w-prose"
    >
      <div class="
        ml-3 lg:pr-8 print:pr-8
        md:flex lg:block justify-between
      ">
        <SkillDetails class="w-40" entry={skills.find(entry => entry.data.skills === "Languages")!}/>
        <SkillDetails class="w-48" entry={skills.find(entry => entry.data.skills === "Technologies")!}/>
        <SkillDetails class="w-48" entry={skills.find(entry => entry.data.skills === "Miscellaneous")!}/>
      </div>

      <script define:vars={{ sidebarBreakpoint }}>
      "use strict";

      const mql = window.matchMedia(`(min-width: ${sidebarBreakpoint})`);
      const details = document.querySelectorAll("details");
      const state = {}

      if (mql.matches) {
        details.forEach(d => {
          state[d.id] = false;
          d.open = true;
        });
      }

      const handleClick = (ev) => mql.matches && ev.preventDefault();
      const saveState = ({ target }) => state[target.id] = mql.matches ? state[target.id] : target.open;

      details.forEach(d => {
        d.addEventListener("click", handleClick);
        d.addEventListener("toggle", saveState);
      });

      mql.addEventListener("change",
        (ev) => details.forEach(d => d.open = ev.matches || state[d.id])
      );
      </script>
    </Section>

    <div class="max-w-prose mx-auto">
      <Section heading="Experience">
        {
          experience
            .filter(({ data }) => data.experience === "work")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
                entry={exp}
              />
            ))
        }
      </Section>

      <Section heading="Certification">
        {
          certifications.map(({ data: cert }) => (
            <Entry
              link={cert.url}
              heading={cert.name}
              subheading={cert.organization.name}
              time={cert.issueDate}
            />
          ))
        }
      </Section>

      <Section heading="Open source">
        {
          projects
            .filter(proj => !proj.data.draft)
            .map(proj => (
              <Entry
                link={proj.data.githubUrl}
                heading={proj.data.title}
                subheading={proj.data.description}
                entry={proj}
              />
            ))
        }
      </Section>

      <Section heading="Volunteering">
        {
          experience
            .filter(({ data }) => data.experience === "volunteering")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
                entry={exp}
              />
            ))
        }
      </Section>

      <Section heading="Education">
        {
          education.map(({ data: edu }) => (
            <Entry
              heading={edu.major}
              subheading={edu.school.name}
              time={[edu.start, edu.end]}
            />
          ))
        }
      </Section>

      <Section heading="Internships">
        {
          experience
            .filter(({ data }) => data.experience === "internship")
            .map(exp => (
              <Entry
                heading={exp.data.title}
                subheading={exp.data.organization.name}
                time={[exp.data.start, exp.data.end]}
                entry={exp}
              />
            ))
        }
      </Section>
    </div>
  </main>
  <div class="h-[20vh] print:hidden"></div>
</BaseLayout>
