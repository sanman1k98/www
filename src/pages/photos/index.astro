---
import { Image } from "astro:assets";
import Page from "@/layouts/MainLayout.astro";
import { photos } from "@/content";

/**
 * Horizontally flowing masonry layout using (mostly) CSS.
 *
 * Use CSS grid to emulate a masonry layout. Calculate dimensions of each item
 * in the layout using fixed absolute units, then convert them into relative
 * units that scale with the viewport width.
 *
 * NOTE: calculations are done only for two and three column layouts.
 */

// Row track size in pixels
const trackSize = 12;

const gapFactor = 2;

// Minimum viewport widths in pixels
const twoColBreakpoint = 640;     // @screen sm
const threeColBreakpoint = 1280;  // @screen xl

// Exact column widths at minimum breakpoints in pixels
const smColWidth = 240;
const xlColWidth = 336;

const calcSmSpan = (h: number, w: number) => {
  const scaledHeight = (smColWidth * h) / w;
  return Math.floor(scaledHeight / trackSize);
};

const calcXlSpan = (h: number, w: number) => {
  const scaledHeight = (xlColWidth * h) / w;
  return Math.floor(scaledHeight / trackSize);
};

const smTrack = 100 / (twoColBreakpoint / trackSize);
const xlTrack = 100 / (threeColBreakpoint / trackSize);

const fluidValues = {
  /** Used to create gaps between items and columns */
  "--masonry-gap-factor": 2,
  "--masonry-sm-track": `${100 / (twoColBreakpoint / trackSize)}vw`,
  "--masonry-xl-track": `${100 / (threeColBreakpoint / trackSize)}vw`,
  "--masonry-sm-col": `${100 / (twoColBreakpoint / smColWidth)}vw`,
  "--masonry-xl-col": `${100 / (threeColBreakpoint / xlColWidth)}vw`,
};
---

<style is:global>
/* Adapted from https://antfu.me/posts/sliding-enter-animation */
@keyframes slide-enter {
  0% { opacity: 0; transform: translateY(10px) }
  to { opacity: 1; transform: translateY(0) }
}

[data-slide-enter] {
  --enter-step: 0;
  --enter-delay: 90ms;
  --enter-start: 0ms;
}

[data-slide-controller=false] [data-slide-enter] { animation: none; }

@media (prefers-reduced-motion:no-preference) {
  [data-slide-enter] {
    animation: slide-enter .6s both 1;
    animation-delay: calc(var(--enter-step) * var(--enter-delay) + var(--enter-start));
  }
}

main {
  display: grid;
  grid-template-columns: 80vw;
  justify-content: center;
  gap: 7.5vw
}

@media (min-width: 640px) {
  main {
    grid-auto-rows: var(--masonry-sm-track);
    grid-template-columns: repeat(2, var(--masonry-sm-col));
    gap: 0 calc(var(--masonry-gap-factor) * var(--masonry-sm-track));
  }

  main > * {
    grid-row: span var(--masonry-sm-span);
    height: var(--masonry-sm-h);
  }
}

@media (min-width: 1280px) {
  main {
    grid-auto-rows: var(--masonry-xl-track);
    grid-template-columns: repeat(3, var(--masonry-xl-col));
    gap: 0 calc(var(--masonry-gap-factor) * var(--masonry-xl-track));
  }

  main > * {
    grid-row: span var(--masonry-xl-span);
    height: var(--masonry-xl-h);
  }
}
</style>

<Page
  title="Photos"
  style={fluidValues}
  class="pt-30 md:pt-36"
>
  {
    photos.map((photo, i) => {
      const { slug, ...attrs } = photo;
      const { height, width } = photo.src;
      const [smSpan, xlSpan] = [
        calcSmSpan(height, width),
        calcXlSpan(height, width),
      ];
      return (
        <figure
          data-slide-enter
          style={{
            "--enter-step": i + 1,
            "--masonry-sm-span": smSpan + gapFactor,
            "--masonry-sm-h": `${smSpan * smTrack}vw`,
            "--masonry-xl-span": xlSpan + gapFactor,
            "--masonry-xl-h": `${xlSpan * xlTrack}vw`,
          }}
          class="
            overflow-clip
            bg-white border-white border-12
            transition duration-350
            shadow-lg hover:shadow-xl
          "
        >
          <a href={`/photos/${slug}`}>
            <Image { ...attrs } class="object-cover h-full w-full"/>
          </a>
        </figure>
      )
    })
  }
</Page>
