---
import { photos } from '@/content';
import Page from '@/layouts/MainLayout.astro';
import { Image } from 'astro:assets';

/**
 * Horizontally flowing masonry layout using (mostly) CSS.
 *
 * Use CSS grid to emulate a masonry layout. Calculate dimensions of each item
 * in the layout using fixed absolute units, then convert them into relative
 * units that scale with the viewport width.
 *
 * NOTE: calculations are done only for two and three column layouts.
 */
---

<style is:global>
	/* Adapted from https://antfu.me/posts/sliding-enter-animation */
	@keyframes slide-enter {
		0% {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@keyframes fade-in {
		0% {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	.slide-entering-item,
	.slide-entering-content > * {
		/* Set `--entrance-position` on "sliding-entering-item" or children of "slide-entering-content". */
		--entrance-position: 0;
		--entrance-duration: 700ms;
		--entrance-interval: 90ms;
		--entrance-extend: 90ms;
		animation: slide-enter ease both 1;
		animation-duration: calc(
			var(--entrance-duration) + var(--entrance-extend) * var(--entrance-position)
		);
		animation-delay: calc(var(--entrance-interval) * var(--entrance-position));
	}

	[data-slide-controller="false"] .slide-entering-item,
	[data-slide-controller="false"] .slide-entering-content > * {
		animation: none;
	}

	@media (prefers-reduced-motion: reduce) {
		.slide-entering-item,
		.slide-entering-content > * {
			animation: fade-in ease both 1;
			animation-duration: calc(
				var(--entrance-duration) + var(--entrance-extend) * var(--entrance-position)
			);
			animation-delay: calc(var(--entrance-interval) * var(--entrance-position));
		}
	}

	/* Begin masonry layout styles */
	main {
		display: grid;
		grid-template-columns: 85vw;
		justify-content: center;
		gap: 6vw;
	}

	/* Two column masonry layout */
	@screen sm {
		main {
			/* Store <number> values because some calculations require a <number>/<integer> result */
			--masonry-track: 1;
			--masonry-col: calc(var(--masonry-track) * 42);
			/* Define max sizes */
			--masonry-max-col-w: 548px;
			--masonry-max-track-size: calc(var(--masonry-max-col-w) / var(--masonry-col));
			/* Multiply by `1vw` to convert <number> to a <length> */
			grid-auto-rows: calc(1vw * var(--masonry-track));
			grid-template-columns: repeat(
				2,
				min(calc(1vw * var(--masonry-col)), var(--masonry-max-col-w))
			);
			/* Have column gaps that are twice the size of the row tracks */
			gap: 0 calc(1vw * calc(2 * var(--masonry-track)));
		}

		/* Style wrapper div for each item in the layout */
		main > div {
			/* Calculate how many rows to span given the aspect ratio, plus two rows for padding */
			/* `calc()` will round to nearest integer */
			grid-row: span calc(calc(calc(var(--masonry-col) * var(--ratio)) / var(--masonry-track)) + 2);
			/* Add top and bottom padding to match the column gap */
			padding-block: min(calc(1vw * var(--masonry-track)), var(--masonry-max-track-size));
		}

		/* Set each item to span the height within their parents  */
		main > div > *:only-child {
			height: 100%;
		}
	}

	/* Three column masonry layout */
	@screen xl {
		main {
			--masonry-track: 1;
			--masonry-col: calc(var(--masonry-track) * 28);
			grid-auto-rows: min(calc(1vw * var(--masonry-track)), var(--masonry-max-track-size));
			grid-template-columns: repeat(
				3,
				min(calc(1vw * var(--masonry-col)), var(--masonry-max-col-w))
			);
		}
	}
</style>

<Page
	title="Photos"
	description="Some of my favorite photos that I've taken"
	class="pt-30 md:pt-36"
>
	<script>
		addEventListener("pageshow", (ev) => {
			// @ts-expect-error "persisted" does not esist on `Event`
			if (ev.persisted) document.querySelector("main")!.dataset.slideController = "false";
		});
	</script>

	{
		photos.map((photo, i) => {
			const { slug, file, alt } = photo;
			const { height: h, width: w } = file;
			return (
				<div class="slide-entering-item" style={{ "--entrance-position": i, "--ratio": h / w }}>
					<figure class="overflow-clip border-12 border-white bg-white shadow-lg transition duration-350 hover:shadow-xl media-[(hover:hover)_and_(pointer:fine)]:hover:scale-102">
						<a href={`/photos/${slug}`}>
							<Image src={file} {alt} loading="eager" class="h-full w-full object-cover" />
						</a>
					</figure>
				</div>
			);
		})
	}
</Page>
