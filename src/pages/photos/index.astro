---
import { Image } from "astro:assets";
import Page from "@/layouts/MainLayout.astro";
import { photos } from "@/content";

/**
 * Horizontally flowing masonry layout using (mostly) CSS.
 *
 * Use CSS grid to emulate a masonry layout. Calculate dimensions of each item
 * in the layout using fixed absolute units, then convert them into relative
 * units that scale with the viewport width.
 *
 * NOTE: calculations are done only for two and three column layouts.
 */
---

<style is:global>
/* Adapted from https://antfu.me/posts/sliding-enter-animation */
@keyframes slide-enter {
  0% { opacity: 0; transform: translateY(10px) }
  to { opacity: 1; transform: translateY(0) }
}

[data-slide-enter] {
  --enter-step: 0;
  --enter-delay: 90ms;
  --enter-start: 0ms;
}

[data-slide-controller=false] [data-slide-enter] { animation: none; }

@media (prefers-reduced-motion:no-preference) {
  [data-slide-enter] {
    animation: slide-enter .6s both 1;
    animation-delay: calc(var(--enter-step) * var(--enter-delay) + var(--enter-start));
  }
}

/* Begin masonry layout styles */
main {
  display: grid;
  grid-template-columns: 85vw;
  justify-content: center;
  gap: 6vw
}

/* Two column masonry layout */
@screen sm {
  main {
    /* Store <number> values because some calculations require a <number>/<integer> result */
    --masonry-track: 1; --masonry-col: 45;
    /* Multiply by `1vw` to convert <number> to a <length> */
    grid-auto-rows: calc(1vw * var(--masonry-track));
    grid-template-columns: repeat(2, calc(1vw * var(--masonry-col)));
    /* Have column gaps that are twice the size of the row tracks */
    gap: 0 calc(1vw * calc(2 * var(--masonry-track)));
  }

  /* Style wrapper div for each item in the layout */
  main > div {
    /* Calculate how many rows to span given the aspect ratio, plus two rows for padding */
    /* `calc()` will round to nearest integer */
    grid-row: span calc(calc(calc(var(--masonry-col) * var(--ratio)) / var(--masonry-track)) + 2);
    /* Add top and bottom padding to match the column gap */
    padding-block: calc(1vw * var(--masonry-track));
  }

  /* Set each item to span the height within their parents  */
  main > div > *:only-child { height: 100%; }
}

/* Three column masonry layout */
@screen xl {
  main {
    --masonry-track: 1; --masonry-col: 28;
    grid-template-columns: repeat(3, calc(1vw * var(--masonry-col)));
  }
}
</style>

<Page
  title="Photos"
  class="pt-30 md:pt-36"
>
  {
    photos.map((photo, i) => {
      const { slug, ...attrs } = photo;
      const { height: h, width: w } = photo.src;
      return (
        <div
          data-slide-enter
          style={{ "--enter-step": i + 1, "--ratio": h / w }}
        >
          <figure
            transition:name={`photo-${slug}`}
            class="
              overflow-clip
              bg-white border-white border-12 shadow-lg
              transition duration-350
              hover:shadow-xl media-[(hover:hover)_and_(pointer:fine)]:hover:scale-102
            "
          >
            <a href={`/photos/${slug}`}>
              <Image { ...attrs } class="object-cover h-full w-full"/>
            </a>
          </figure>
        </div>
      )
    })
  }
</Page>
