---
import { Image } from "astro:assets";
import Page from "@/layouts/MainLayout.astro";
import { photos } from "@/content";

/**
 * Horizontally flowing masonry layout using pure CSS.
 *
 * Since the dimensions of the items in the layout are known, an implicitly
 * created CSS grid with fixed-width columns and short row tracks can be used
 * to emulate a masonry layout.
 *
 * Use the aspect ratio of each item along with its column width to calculate
 * how many rows it must span.
 */

/** Size of the row tracks in px. */
const TRACK = 16;

const validateSize = (size: number) => {
  if (size % TRACK === 0) return size;
  throw new Error(`
    The given size (${size}) must be evenly divisible by the constant "TRACK" (${TRACK}).
    > ${size} % ${TRACK} = ${size % TRACK}
    Hint: use ${size - (size % TRACK)}
  `);
}

/** Gap between elements and columns. */
const GUTTER = validateSize(32);

/** Column widths for different breakpoints. */
const COL_WIDTH = {
  SM   : validateSize(288),
  MD   : validateSize(336),
  LG   : validateSize(304),
  XL   : validateSize(384),
  "2XL": validateSize(480),
};

const masonryStyles = {
  "--masonry-track" : `${TRACK}px`,
  // Gap between elements and columns.
  "--masonry-gutter": `${validateSize(32)}px`,

  // Column widths for different breakpoints.
  "--masonry-w-sm"  : `${validateSize(288)}px`,
  "--masonry-w-md"  : `${validateSize(336)}px`,
  "--masonry-w-lg"  : `${validateSize(304)}px`,
  "--masonry-w-xl"  : `${validateSize(384)}px`,
  "--masonry-w-2xl" : `${validateSize(480)}px`,
}

/** Returns a height directly proportional to the given width. */
const getScaledHeight = (
  scaledWidth: number,
  origHeight: number,
  origWidth: number
) => ((scaledWidth * origHeight)/origWidth);

/**
 * Calculates the number of rows that can span within an element with the given
 * height.
 */
const calcSpan = (height: number) => Math.floor(height/TRACK);

/**
 * Returns a string value for an element's "style" attribute with the given
 * dimensions.
 */
function generateMasonryStyles(height: number, width: number) {
  let styles = "";
  // Create CSS variables for each column width and breakpoint
  for (const [breakpoint, colWidth] of Object.entries(COL_WIDTH)) {
    const bp = breakpoint.toLowerCase();

    // An exact height value directly proportional to the new width
    const scaledHeight = getScaledHeight(colWidth, height, width);

    // Number of rows to span while mostly preserving aspect ratio
    const rowSpan = calcSpan(scaledHeight);

    // The height of the element aligned to the track
    styles += `--masonry-h-${bp}:${rowSpan * TRACK}px;`;

    // Number of rows to span plus additional rows for vertical spacing
    styles += `--masonry-span-${bp}:${rowSpan + (GUTTER/TRACK)};`;
  }
  return styles;
}
---
<style>
/* Adapted from https://antfu.me/posts/sliding-enter-animation */
@keyframes slide-enter {
  0% { opacity: 0; transform: translateY(10px) }
  to { opacity: 1; transform: translateY(0) }
}
[data-slide-enter] {
  --enter-step: 0;
  --enter-delay: 90ms;
  --enter-start: 0ms;
}
[data-slide-controller=false] [data-slide-enter] { animation: none; }
@media (prefers-reduced-motion:no-preference) {
  [data-slide-enter] {
    animation: slide-enter .6s both 1;
    animation-delay: calc(var(--enter-step) * var(--enter-delay) + var(--enter-start));
  }
}
</style>

<Page
  title="Photos"
  style={masonryStyles}
  class={`
    pt-30 md:pt-36 lt-sm:gap-y-8 
    justify-center mx-auto px-8
    grid grid-cols-1
    sm:gap-x-[var(--masonry-gutter)]
    sm:auto-rows-[var(--masonry-track)]
    sm:grid-cols-[repeat(2,var(--masonry-w-sm))]
    md:grid-cols-[repeat(2,var(--masonry-w-md))]
    lg:grid-cols-[repeat(3,var(--masonry-w-lg))]
    xl:grid-cols-[repeat(3,var(--masonry-w-xl))]
    2xl:grid-cols-[repeat(3,var(--masonry-w-2xl))]
  `}
>
  {
    photos.map((photo, i) => {
      const { slug, ...attrs } = photo;
      const { height, width } = photo.src;
      return (
        <figure
          data-slide-enter
          style={`
            --enter-step:${i + 1};${generateMasonryStyles(height, width)}
          `}
          class="
            overflow-clip
            bg-white border-white border-12
            transition duration-350
            shadow-lg hover:shadow-xl
            sm:row-[span_var(--masonry-span-sm)]
            md:row-[span_var(--masonry-span-md)]
            lg:row-[span_var(--masonry-span-lg)]
            xl:row-[span_var(--masonry-span-xl)]
            2xl:row-[span_var(--masonry-span-2xl)]
            sm:h-[var(--masonry-h-sm)]
            md:h-[var(--masonry-h-md)]
            lg:h-[var(--masonry-h-lg)]
            xl:h-[var(--masonry-h-xl)]
            2xl:h-[var(--masonry-h-2xl)]
          "
        >
          <a href={`/photos/${slug}`} class="h-full">
            <Image { ...attrs } class="object-contain"/>
          </a>
        </figure>
      )
    })
  }
</Page>
