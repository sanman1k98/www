---
type Props = { class?: string };

function isCurrent(href: string): "page" | false {
  const { pathname } = Astro.url;
  const current = (pathname === href)
    || (href !== "/" && pathname.startsWith(href));
  return current && "page";
}

const pages = Array.from(
  [
    { text: "Home", href: "/" },
    { text: "Photos", href: "/photos" },
    { text: "Contact", href: "/contact" },
  ],
  page => ({ ...page, "aria-current": isCurrent(page.href) }),
);
---

<style>
li:last-child > a { padding-right: 0 }

@media (hover: hover), (any-hover: hover) {
  .group:hover li:not(:hover) { opacity: 0.65 }
  .group:hover a:not(:hover) { opacity: 0.65 }
  li:hover { opacity: 1 !important }
  a:hover {
    text-decoration-color: theme(colors.sky.400);
    font-weight: 500;
    opacity: 1 !important;
    color: black;
  }
}
</style>

<nav
  class="text-sky-950 font-normal font-rec"
  class:list={[Astro.props.class]}
>
  <ul class="group w-max flex divide-x-1">
    {
      pages.map((link) => {
        if (!link)
          return null;
        const { text, ...attrs } = link;
        return (
          <li class="transition duration-900">
            <a
              {...attrs}
              class="px-3 py-3 underline underline-2.5 underline-offset-5 transition duration-200"
              class:list={link["aria-current"] ? "font-medium decoration-sky-600" : "decoration-transparent"}
            >
              {text}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>
