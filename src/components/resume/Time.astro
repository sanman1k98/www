---
import type { HTMLAttributes } from "astro/types";
import { BUILD } from "astro:env/server";
import {
  type Color,
  fixupHueLonger,
  formatHex,
  interpolate,
  modeOklch,
  parseHex,
  useMode,
} from "culori/fn";
import { unoTheme } from "@/utils";
import { normalizeCvDate } from "@/content";

type DateRange = [
  start: Date,
  /** A nullish end date means it is currently ongoing. */
  end?: Date | null | undefined,
];

type Props = HTMLAttributes<"time"> & {
  time: Date | DateRange;
  format?: Intl.DateTimeFormat;
  /** Don't use dates to determine text colors. */
  nocolormix?: boolean;
};

const defaultFormat = Intl.DateTimeFormat("en", {
  year: "numeric",
  month: "long",
  timeZone: "UTC",
});

const {
  time,
  format = defaultFormat,
  nocolormix = BUILD === "resume",
} = Astro.props;

const timelineColors: Color[] = [
  parseHex(unoTheme.colors.sky[700]),
  parseHex(unoTheme.colors.sky[500]),
];

// Register `oklch` color space used by the interpolator.
useMode(modeOklch);

/** @param t - Number between `[0, 1]` for interpolation. */
const mixTimelineColors: (t: number) => Color = interpolate(
  timelineColors,
  "oklch",
  // Longer path around hue circle is more colorful.
  // @ts-expect-error broken types
  { h: { fixup: fixupHueLonger } },
);

function getTextColor(date: Date | null | undefined): string {
  if (nocolormix || !date)
    return unoTheme.colors.sky[700];
  const t = normalizeCvDate(date);
  const color = mixTimelineColors(t);
  return formatHex(color);
}

let text: string;
let textColor: string;

if (Array.isArray(time)) {
  const [start, end] = time;
  text = end
    ? format.formatRange(start, end)
    : `${format.format(start)} - Present`;
  // Use the `end` date to determine the color.
  textColor = getTextColor(end);
}
 else {
  text = format.format(time);
  textColor = getTextColor(time);
}
---

<time style={{ color: textColor }} class:list={[Astro.props.class]}>{text}</time>
